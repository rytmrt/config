"+----------------------------------------------------------------------------+"
"        _
" __   _(_)_ __ ___  _ __ ___ 
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
"   \_/ |_|_| |_| |_|_|  \___|
"
" Created and maintenance by rytmrt <ryota.morita.3.8@gmail.com>
"+----------------------------------------------------------------------------+"

if &compatible
  set nocompatible
endif

"+----------------------------------------------------------------------------+"
" Initialize:
"
let s:is_windows = has('win32') || has('win64')

function! IsWindows() abort
  return s:is_windows
endfunction

function! IsMac() abort
  return !s:is_windows && !has('win32unix')
      \ && (has('mac') || has('macunix') || has('gui_macvim')
      \     || (!executable('xdg-open') && system('uname') =~? '^darwin'))
endfunction

" Setting of the encoding to use for a save and reading.
" Make it normal in UTF-8 in Unix.
if has('vim_starting') && &encoding !=# 'utf-8'
  if IsWindows() && !has('gui_running')
    set encoding=cp932
  else
    set encoding=utf-8
  endif
endif

" Build encodings.
let &fileencodings = join([
      \ 'ucs-bom', 'iso-2022-jp-3', 'utf-8', 'euc-jp', 'cp932'])

" Setting of terminal encoding.
if !has('gui_running') && IsWindows()
  " For system.
  set termencoding=cp932
endif

if has('multi_byte_ime')
  set iminsert=0 imsearch=0
endif

" Use English interface.
language message C

" Use ',' instead of '\'.
" Use <Leader> in global plugin.
let g:mapleader = ','
" Use <LocalLeader> in filetype plugin.
let g:maplocalleader = 'm'

" Release keymappings for plug-in.
nnoremap ;  <Nop>
nnoremap m  <Nop>
nnoremap ,  <Nop>

if IsWindows()
  " Exchange path separator.
   set shellslash
endif

" Disable packpath
set packpath=

" Disable default plugins
" Disable menu.vim
if has('gui_running')
   set guioptions=Mc
endif
let g:loaded_gzip              = 1
let g:loaded_tar               = 1
let g:loaded_tarPlugin         = 1
let g:loaded_zip               = 1
let g:loaded_zipPlugin         = 1
let g:loaded_rrhelper          = 1
let g:loaded_2html_plugin      = 1
let g:loaded_vimball           = 1
let g:loaded_vimballPlugin     = 1
let g:loaded_getscript         = 1
let g:loaded_getscriptPlugin   = 1
let g:loaded_netrw             = 1
let g:loaded_netrwPlugin       = 1
let g:loaded_netrwSettings     = 1
let g:loaded_netrwFileHandlers = 1
let g:loaded_matchparen        = 1
let g:loaded_LogiPat           = 1
let g:loaded_logipat           = 1
let g:loaded_tutor_mode_plugin = 1
let g:loaded_spellfile_plugin  = 1
let g:loaded_man               = 1
let g:loaded_matchit           = 1

" Filetype
filetype plugin indent on
augroup my_filetypes
  autocmd!
  autocmd BufRead,BufNewFile *.cs setfiletype cs
augroup END

"+----------------------------------------------------------------------------+"

set backspace=indent,eol,start
set list
set listchars=tab:▸\ ,trail:⊔,extends:»,precedes:«,nbsp:%
set autoindent
set smartindent
set ruler
set expandtab
set sw=4 ts=4 sts=4
set showmatch
set matchtime=1
set swapfile
set directory=~/.vim/swaps
set backup
set backupdir=~/.vim/backups
set undofile
set undodir=~/.vim/undos

" 保存時の文字コード
set fileencoding=utf-8
" 読み込み時の文字コードの自動判別. 左側が優先される
set fileencodings=ucs-boms,utf-8,euc-jp,cp932
" 改行コードの自動判別. 左側が優先される
set fileformats=unix,dos,mac
" □や○文字が崩れる問題を解決
set ambiwidth=double

set modelines=5
set clipboard+=unnamed
set cursorline
set number
set visualbell
set laststatus=2
set background=dark
set display=lastline
set pumheight=10
set hlsearch
set ignorecase
set smartcase
syntax on

"---------------------------------------------------------------------------
" Mappings
"
" Easy Normal-mode access.
nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;

" Scroll
noremap <expr> <C-b> max([winheight(0) - 2, 1]) . "\<C-u>" . (line('.') < 1         + winheight(0) ? 'H' : 'L')
noremap <expr> <C-f> max([winheight(0) - 2, 1]) . "\<C-d>" . (line('.') > line('$') - winheight(0) ? 'L' : 'H')
noremap <expr> <C-y> (line('w0') <= 1         ? 'k' : "\<C-y>")
noremap <expr> <C-e> (line('w$') >= line('$') ? 'j' : "\<C-e>")

" Clear highlight.
nnoremap <Esc><Esc> :nohlsearch<CR>:match<CR>

set secure
